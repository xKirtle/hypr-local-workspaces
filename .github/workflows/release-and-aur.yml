name: release-and-aur
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  # Build and attach release artifacts (optional but nice)
  release:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: "1.25.x" }

      - name: Derive version
        id: v
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "ver=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Build (static)
        run: |
          export CGO_ENABLED=0
          GOOS=linux GOARCH=${{ matrix.goarch }} \
          go build -trimpath -ldflags "-s -w -X main.version=${{ steps.v.outputs.ver }}" \
            -o hypr-local-workspaces .

      - name: Package tarball
        run: |
          cp LICENSE LICENSE.copy
          TARBALL="hypr-local-workspaces-${{ steps.v.outputs.tag }}-linux-${{ matrix.goarch }}.tar.gz"
          tar -czf "$TARBALL" hypr-local-workspaces LICENSE.copy
          echo "TARBALL=$TARBALL" >> $GITHUB_ENV
          sha256sum "$TARBALL" | tee "${TARBALL}.sha256"

      - name: Upload GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.v.outputs.tag }}
          generate_release_notes: true
          files: |
            ${{ env.TARBALL }}
            ${{ env.TARBALL }}.sha256

  # Update AUR source package (PKGBUILD + .SRCINFO)
  aur:
    runs-on: ubuntu-latest
    needs: release
    container: archlinux:base-devel
    steps:
      - name: Install tooling
        run: |
          pacman -Syu --noconfirm git openssh curl jq base-devel pacman-contrib
          # makepkg --printsrcinfo is in pacman >= 6; if missing, also: pacman -S --noconfirm pkgbuild-introspection

      - uses: actions/checkout@v4

      - name: Derive vars
        id: v
        env:
          REPO: ${{ github.repository }}
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          VER="${TAG#v}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "ver=$VER" >> $GITHUB_OUTPUT

      - name: Compute source tarball sha256
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          SRC_URL="https://github.com/${OWNER}/${REPO}/archive/refs/tags/${{ steps.v.outputs.tag }}.tar.gz"
          curl -L "$SRC_URL" -o src.tar.gz
          sha256sum src.tar.gz | awk '{print $1}' > SHA_SRC

      - name: Prepare AUR workdir
        run: |
          mkdir aur-src
          cp PKGBUILD aur-src/PKGBUILD

      - name: Patch PKGBUILD (pkgver + sha256sums)
        working-directory: aur-src
        run: |
          ver='${{ steps.v.outputs.ver }}'
          sha=$(cat ../SHA_SRC)
          sed -i "s/^pkgver=.*/pkgver=${ver}/" PKGBUILD
          sed -i "s/^sha256sums=.*/sha256sums=('${sha}')/" PKGBUILD
          makepkg --printsrcinfo > .SRCINFO
          printf "PKGBUILD and .SRCINFO prepared:\n"; head -n 40 PKGBUILD; echo; head -n 40 .SRCINFO

      - name: Write AUR SSH key
        run: |
          install -d -m 700 ~/.ssh
          install -m 600 /dev/stdin ~/.ssh/aur <<'EOF'
          $AUR_SSH_PRIVATE_KEY
          EOF
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Push to AUR
        working-directory: aur-src
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/aur -o StrictHostKeyChecking=no"
          AUR_PKG: hypr-local-workspaces
          AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
          AUR_EMAIL:    ${{ secrets.AUR_EMAIL }}
        run: |
          git init
          git config user.name  "$AUR_USERNAME"
          git config user.email "$AUR_EMAIL"
          git remote add origin "ssh://aur@aur.archlinux.org/${AUR_PKG}.git"
          git add PKGBUILD .SRCINFO
          git commit -m "v${{ steps.v.outputs.ver }}"
          git push -u origin master
