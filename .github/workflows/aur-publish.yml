name: Publish to AUR (on tag)

on:
  push:
    tags:
      - 'v*'     # e.g. v0.1.0

permissions:
  contents: read

jobs:
  aur:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive version from tag
        id: ver
        run: |
          RAW="${GITHUB_REF_NAME}" # e.g. v0.1.0
          # strip leading v or V
          PKGVER="${RAW#[vV]}"
          # simple sanity check (digits and dots)
          if ! [[ "$PKGVER" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
            echo "Tag must be like v1.2.3 (got: $RAW)"; exit 1
          fi
          echo "pkgver=$PKGVER" >> "$GITHUB_OUTPUT"

      - name: Update pkgver/pkgrel in PKGBUILD
        run: |
          set -euo pipefail
          PKGVER="${{ steps.ver.outputs.pkgver }}"
          sed -Ei "s/^pkgver=.*/pkgver=${PKGVER}/" PKGBUILD
          if grep -q '^pkgrel=' PKGBUILD; then
            sed -Ei 's/^pkgrel=.*/pkgrel=1/' PKGBUILD
          else
            echo 'pkgrel=1' >> PKGBUILD
          fi

      - name: Update checksums (updpkgsums)
        run: |
          docker run --rm -v "$PWD":/pkg -w /pkg archlinux:base bash -lc '
            set -euo pipefail
            pacman -Sy --noconfirm --needed pacman-contrib git curl >/dev/null
            useradd -m build
            chown -R build:build /pkg
            su build -c "updpkgsums"
          '

      - name: Generate .SRCINFO
        run: |
          docker run --rm -v "$PWD":/pkg -w /pkg archlinux:base bash -lc '
            set -euo pipefail
            pacman -Sy --noconfirm --needed base-devel >/dev/null
            useradd -m build
            chown -R build:build /pkg
            su build -c "makepkg --printsrcinfo > .SRCINFO"
          '

      - name: Extract pkgname
        id: meta
        run: |
          PKGNAME="$(grep -E '^[[:space:]]*pkgname=' PKGBUILD | head -n1 | cut -d= -f2)"
          test -n "$PKGNAME" || { echo "pkgname not found"; exit 1; }
          echo "pkgname=$PKGNAME" >> "$GITHUB_OUTPUT"

      - name: Set up SSH for AUR
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Add AUR host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Push PKGBUILD and .SRCINFO to AUR
        env:
          GIT_AUTHOR_NAME:  ${{ secrets.AUR_GIT_USERNAME || 'github-actions[bot]' }}
          GIT_AUTHOR_EMAIL: ${{ secrets.AUR_GIT_EMAIL    || 'github-actions[bot]@users.noreply.github.com' }}
          GIT_COMMITTER_NAME:  ${{ secrets.AUR_GIT_USERNAME || 'github-actions[bot]' }}
          GIT_COMMITTER_EMAIL: ${{ secrets.AUR_GIT_EMAIL    || 'github-actions[bot]@users.noreply.github.com' }}
        run: |
          set -euo pipefail
          AUR_URL="aur@aur.archlinux.org:${{ steps.meta.outputs.pkgname }}.git"
          TMPDIR="$(mktemp -d)"
          git clone "$AUR_URL" "$TMPDIR/aur"

          cp -f PKGBUILD .SRCINFO "$TMPDIR/aur/"
          cd "$TMPDIR/aur"

          # handle first push into empty repo
          if ! git symbolic-ref -q HEAD >/dev/null; then
            git checkout -b master
          fi

          git config user.name  "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to push to AUR."
            exit 0
          fi

          git commit -m "AUR: ${{ steps.meta.outputs.pkgname }} v${{ steps.ver.outputs.pkgver }}"
          git push origin HEAD:master

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
