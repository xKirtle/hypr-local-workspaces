name: Publish to AUR

on:
  push:
    branches: [ main ]
    paths:
      - 'PKGBUILD'        # run only when PKGBUILD changes
  workflow_dispatch:      # allow manual runs

permissions:
  contents: write         # needed to create/push tags

jobs:
  aur:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need tags

      - name: Extract pkgname and pkgver
        id: meta
        run: |
          PKGVER="$(grep -E '^[[:space:]]*pkgver=' PKGBUILD | head -n1 | cut -d= -f2)"
          PKGNAME="$(grep -E '^[[:space:]]*pkgname=' PKGBUILD | head -n1 | cut -d= -f2)"
          if [ -z "$PKGVER" ] || [ -z "$PKGNAME" ]; then
            echo "Failed to parse pkgver/pkgname from PKGBUILD"; exit 1
          fi
          echo "pkgver=$PKGVER"   >> "$GITHUB_OUTPUT"
          echo "pkgname=$PKGNAME" >> "$GITHUB_OUTPUT"

      - name: Create tag v${{ steps.meta.outputs.pkgver }} if missing
        run: |
          V="v${{ steps.meta.outputs.pkgver }}"
          if git rev-parse -q --verify "refs/tags/$V" >/dev/null; then
            echo "Tag $V already exists."
          else
            git tag -a "$V" -m "Release $V from PKGBUILD"
            git push origin "$V"
          fi

      - name: Update checksums in PKGBUILD
        run: |
          docker run --rm -v "$PWD":/pkg -w /pkg archlinux:base bash -lc '
            set -euo pipefail
            pacman -Sy --noconfirm --needed base-devel >/dev/null
            useradd -m build
            chown -R build:build /pkg
            su build -c "updpkgsums"
          '

      - name: Generate .SRCINFO (non-root inside Arch container)
        run: |
          docker run --rm -v "$PWD":/pkg -w /pkg archlinux:base bash -lc '
            set -euo pipefail
            pacman -Sy --noconfirm --needed base-devel >/dev/null
            useradd -m build
            chown -R build:build /pkg
            su build -c "makepkg --printsrcinfo > .SRCINFO"
          '
        # If you prefer not to update inside the container, drop the pacman -Sy line
        # and rely on the base image's pacman/makepkg availability.

      - name: Set up SSH for AUR
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

      - name: Add AUR host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Push PKGBUILD and .SRCINFO to AUR
        env:
          GIT_AUTHOR_NAME:  ${{ secrets.AUR_GIT_USERNAME || 'github-actions[bot]' }}
          GIT_AUTHOR_EMAIL: ${{ secrets.AUR_GIT_EMAIL    || 'github-actions[bot]@users.noreply.github.com' }}
          GIT_COMMITTER_NAME:  ${{ secrets.AUR_GIT_USERNAME || 'github-actions[bot]' }}
          GIT_COMMITTER_EMAIL: ${{ secrets.AUR_GIT_EMAIL    || 'github-actions[bot]@users.noreply.github.com' }}
        run: |
          set -euo pipefail
          AUR_URL="aur@aur.archlinux.org:hypr-local-workspaces.git"
          TMPDIR="$(mktemp -d)"
          git clone "$AUR_URL" "$TMPDIR/aur"
          
          # Sync files required by AUR
          cp -f PKGBUILD .SRCINFO "$TMPDIR/aur/"
          
          cd "$TMPDIR/aur"
          
          # Ensure we have a branch (empty AUR repos have no HEAD yet)
          if ! git symbolic-ref -q HEAD >/dev/null; then
            git checkout -b master
          fi
          
          git config user.name  "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          
          # Stage, then check if there is anything to commit
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to push to AUR."
            exit 0
          fi
          
          git commit -m "AUR: hypr-local-workspaces v${{ steps.meta.outputs.pkgver }}"
          # Push explicitly to master to cover first-push case
          git push origin HEAD:master
